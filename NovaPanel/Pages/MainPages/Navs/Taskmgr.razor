@page "/taskmgr"
@using System.Runtime.InteropServices
@using NovaPanel.Model.ServerMonitorM
@using NovaPanel.Model
@using System.IO
@using System.Text
@using System.Management
@using System.Diagnostics
@using System.IO.Compression
@using System.Management.Automation
@using System.Threading.Tasks

<PageTitle>进程管理器</PageTitle>

<link href="style/list.css" rel="stylesheet" />

<script>
    document.addEventListener('contextmenu', event => event.preventDefault());
    function ipt(){return document.querySelector('input').value}
</script>

<div class="list-container">
    <div class="sticky-top">
        <div class="a-bar">

            <Button Text="<span style='font-size:18' class='fas fa-sync'/>" Click="LoadProcess" Style="margin-right:10px;" />
            <input style="color:#000" class="flex w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none  focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm"
            type="text" @onkeyup="Search" />
        </div>
    </div>

    <div class="main-content">
        <div class="f-list">
            <table>
                <thead>
                    <tr>
                        <th @onclick='() => SortBy("Name")'>文件名</th>
                        <th @onclick='() => SortBy("Pid")'>PID</th>
                        <th @onclick='() => SortBy("CPU")'>CPU</th>
                        <th @onclick='() => SortBy("RAM")'>RAM</th>
                        <th @onclick='() => SortBy("Level")'>优先级</th>
                        <th @onclick='() => SortBy("CreateTime")'>创建时间</th>
                        <th @onclick='() => SortBy("User")'>用户</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var proces in fprocessList)
                    {
                        <tr @onmousedown='()=>{selectedProcess = Process.GetProcessById(proces.Pid);Console.WriteLine($"Select:{proces.Pid}");}'>
                            <td @onclick="()=>ShowCommand(proces.Pid)">
                                <ContextMenuTrigger MenuId="PContextMenu">
                                    @proces.Name
                                </ContextMenuTrigger>
                            </td>
                            <td style="text-align:center">@proces.Pid</td>
                            <td style="text-align:center">
                                @if (proces.Cpu.ToString().Length >= 4)
                                    @(proces.Cpu.ToString().Substring(0, 4) + "%")
                                else
                                    @proces.Cpu.ToString()


                            </td>
                            <td style="text-align:center">@proces.Ram.ToString("0.00") MB</td>
                            <td style="text-align:center">@proces.Level</td>
                            <td style="text-align:center">@proces.CreateTime</td>
                            <td style="text-align:center">@proces.User</td>
                        </tr>
                    }
                </tbody>

            </table>
        </div>
    </div>
</div>

<ContextMenu Id="PContextMenu">
    <Item OnClick="@ExitProcess">结束进程</Item>
    <Item OnClick="@ReOpen">重启进程</Item>
    <Item OnClick="@OpenPath">定位到目录</Item>
</ContextMenu>

<WebNotepad Show="showModal" TContent="@modalContent" OnClose="() => showModal = false" />


@code {
    #region Win32 Api
    const int PROCESS_QUERY_INFORMATION = 0x0400;
    const int PROCESS_VM_READ = 0x0010;
    const int MAX_PATH = 260;

    [DllImport("kernel32.dll")]
    static extern IntPtr OpenProcess(int dwDesiredAccess, bool bInheritHandle, int dwProcessId);

    [DllImport("kernel32.dll")]
    static extern bool CloseHandle(IntPtr hObject);

    [DllImport("kernel32.dll", SetLastError = true)]
    static extern bool QueryFullProcessImageName(IntPtr hProcess, int dwFlags, StringBuilder lpExeName, ref int lpdwSize);

    [DllImport("psapi.dll", SetLastError = true)]
    static extern uint GetModuleFileNameEx(IntPtr hProcess, IntPtr hModule, StringBuilder lpBaseName, int nSize);

    [DllImport("kernel32.dll")]
    static extern bool GetProcessTimes(IntPtr hProcess, out long lpCreationTime, out long lpExitTime, out long lpKernelTime, out long lpUserTime);

    [DllImport("psapi.dll", SetLastError = true)]
    static extern bool GetProcessMemoryInfo(IntPtr hProcess, out PROCESS_MEMORY_COUNTERS counters, uint size);

    [StructLayout(LayoutKind.Sequential, Size = 40)]
    struct PROCESS_MEMORY_COUNTERS
    {
        public uint cb;
        public uint PageFaultCount;
        public ulong PeakWorkingSetSize;
        public ulong WorkingSetSize;
        public ulong QuotaPeakPagedPoolUsage;
        public ulong QuotaPagedPoolUsage;
        public ulong QuotaPeakNonPagedPoolUsage;
        public ulong QuotaNonPagedPoolUsage;
        public ulong PagefileUsage;
        public ulong PeakPagefileUsage;
    }
    #endregion

    private bool showModal = false;
    private string modalContent = "";

    private List<ProcessInfo> processList = new List<ProcessInfo>();
    private List<ProcessInfo> fprocessList = new List<ProcessInfo>();
    public static Process selectedProcess = null;

    private string sortByField = "Name";
    private bool sortAscending = true;

    private string searchKeyword = string.Empty;

    protected override void OnInitialized()
        => LoadProcess();

    private void ShowCommand(int pid)
    {
        modalContent = GetProcessCommandLine(pid);
        showModal = true;
    }

    private async void LoadProcess()
    {
        processList = new List<ProcessInfo>();
        fprocessList = new List<ProcessInfo>();

        await Task.Run(() =>
        {
            Process[] processes = Process.GetProcesses();

            Parallel.ForEach(processes, process =>
            {
                try
                {
                    // 获取句柄
                    IntPtr processHandle = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, false, process.Id);

                    string processName = process.ProcessName;
                    StringBuilder processPath = new StringBuilder(MAX_PATH);
                    int pathSize = MAX_PATH;

                    long creationTime, exitTime, kernelTime, userTime;
                    string crTime = "";
                    if (processHandle == IntPtr.Zero)
                    {
                        //Console.WriteLine($"无法打开进程 {processName} (PID: {process.Id})");
                    }

                    if (!QueryFullProcessImageName(processHandle, 0, processPath, ref pathSize))
                    {
                        //Console.WriteLine($"无法获取进程路径 {processName} (PID: {process.Id})");
                    }

                    if (!GetProcessTimes(processHandle, out creationTime, out exitTime, out kernelTime, out userTime))
                    {
                        crTime = "";
                        //Console.WriteLine($"无法获取启动时间 {processName} (PID: {process.Id})");
                    }
                    else
                    {
                        crTime = DateTime.FromFileTime(creationTime).ToString("MM-dd HH:mm:ss");
                    }

                    PROCESS_MEMORY_COUNTERS memCounters;
                    if (!GetProcessMemoryInfo(processHandle, out memCounters, (uint)Marshal.SizeOf(typeof(PROCESS_MEMORY_COUNTERS))))
                    {
                        //Console.WriteLine($"无法获取内存信息 {processName} (PID: {process.Id})");
                    }

                    // 如果所有检查都通过，则添加到列表
                    lock (processList)
                    {
                        processList.Add(new ProcessInfo
                            {
                                Name = processName,
                                Pid = process.Id,
                                Level = process.BasePriority,
                                CreateTime = crTime,
                                Cpu = process.TotalProcessorTime.TotalSeconds / Environment.ProcessorCount / Environment.TickCount,
                                Ram = memCounters.WorkingSetSize / 1024.0 / 1024.0,
                                User = process.MachineName,
                                Path = processPath.ToString()
                            });
                    }

                    CloseHandle(processHandle);

                }
                catch (Exception ex)
                {
                    //Console.WriteLine($"Error accessing process {process.ProcessName}: {ex.Message}");
                }
            });

            fprocessList = processList;
        });

        SortProcessList();
        StateHasChanged();
    }

    private async void Search(KeyboardEventArgs e)
    {
        searchKeyword = (await JSRuntime.InvokeAsync<string>("ipt")).ToLower();

        if (!string.IsNullOrEmpty(searchKeyword))
        {

            fprocessList = new();
            foreach (var prc in processList)
            {
                if (prc.Name.ToLower().Contains(searchKeyword) ||
                    prc.Pid.ToString().Contains(searchKeyword) ||
                    prc.User.ToLower().Contains(searchKeyword))
                {
                    fprocessList.Add(prc);
                }
            }
        }
        else
        {
            fprocessList = processList;
        }
        SortProcessList();
        StateHasChanged();
    }

    private void SortProcessList()
    {
        switch (sortByField)
        {
            case "Name":
                fprocessList = sortAscending
                    ? fprocessList.OrderBy(p => p.Name).ToList()
                    : fprocessList.OrderByDescending(p => p.Name).ToList();
                break;
            case "Pid":
                fprocessList = sortAscending
                    ? fprocessList.OrderBy(p => p.Pid).ToList()
                    : fprocessList.OrderByDescending(p => p.Pid).ToList();
                break;
            case "Level":
                fprocessList = sortAscending
                    ? fprocessList.OrderBy(p => p.Level).ToList()
                    : fprocessList.OrderByDescending(p => p.Level).ToList();
                break;
            case "CPU":
                fprocessList = sortAscending
                    ? fprocessList.OrderBy(p => p.Cpu).ToList()
                    : fprocessList.OrderByDescending(p => p.Cpu).ToList();
                break;
            case "RAM":
                fprocessList = sortAscending
                    ? fprocessList.OrderBy(p => p.Ram).ToList()
                    : fprocessList.OrderByDescending(p => p.Ram).ToList();
                break;
            case "User":
                fprocessList = sortAscending
                    ? fprocessList.OrderBy(p => p.User).ToList()
                    : fprocessList.OrderByDescending(p => p.User).ToList();
                break;
            case "CreateTime":
                fprocessList = sortAscending
                    ? fprocessList.OrderBy(p => p.CreateTime).ToList()
                    : fprocessList.OrderByDescending(p => p.CreateTime).ToList();
                break;
        }
    }

    private void SortBy(string field)
    {
        if (sortByField == field)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortByField = field;
            sortAscending = true;
        }
        SortProcessList();
    }

    private void ExitProcess()
    {
        if (selectedProcess != null)
        {
            try
            {
                selectedProcess.Kill();
                LoadProcess(); // 刷新进程列表
            }
            catch (Exception ex)
            {
                ShowError($"无法结束进程: {ex.Message}");
            }
        }
    }

    private void ReOpen()
    {
        if (selectedProcess != null)
        {
            try
            {
                var startInfo = selectedProcess.StartInfo;
                selectedProcess.Kill();
                Process.Start(startInfo);
                LoadProcess(); // 刷新进程列表
            }
            catch (Exception ex)
            {
                ShowError($"无法重启进程: {ex.Message}");
            }
        }
    }

    private string GetProcessCommandLine(int pid)
    {
        try
        {
            string query = $"SELECT CommandLine FROM Win32_Process WHERE ProcessId = {pid}";
            using (ManagementObjectSearcher searcher = new ManagementObjectSearcher(query))
            {
                using (ManagementObjectCollection results = searcher.Get())
                {
                    foreach (ManagementObject process in results)
                    {
                        return process["CommandLine"]?.ToString() ?? "无法获取命令行参数";
                    }
                }
            }
            return "进程未找到";
        }
        catch (Exception ex)
        {
            return $"获取命令行参数时出错: {ex.Message}";
        }
    }

    private void OpenPath()
    {
        if (selectedProcess != null)
        {
            try
            {
                var directory = Path.GetDirectoryName(selectedProcess.MainModule?.FileName);
                if (directory != null)
                {
                    NavigationManager.NavigateTo($"/explorer/{directory.Replace("\\", "$")}");
                }
            }
            catch (Exception ex)
            {
                ShowError($"无法定位到目录: {ex.Message}");
            }
        }
    }

    private async Task ShowError(string message)
        => await JSRuntime.InvokeVoidAsync("swal", "错误", message, "error");

    private class ProcessInfo
    {
        public string Name { get; set; }
        public int Pid { get; set; }
        public int Level { get; set; }
        public string CreateTime { get; set; }
        public double Cpu { get; set; }
        public double Ram { get; set; }
        public string Path { get; set; }
        public string User { get; set; }
    }


}