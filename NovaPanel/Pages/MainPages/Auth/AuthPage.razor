@page "/a/{Route}"

@using NovaPanel.Model

<PageTitle>Login</PageTitle>

@if (IsAuthenticated)
{
    <p>登录成功！正在跳转到目标页面...</p>
}
else
{
    <div data-state="open" class="fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0" style="pointer-events: auto;" data-aria-hidden="true" aria-hidden="true"></div>
    <div role="dialog" id="radix-:rk:" aria-describedby="radix-:rm:" aria-labelledby="radix-:rl:" data-state="open"
    class="fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-color p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg sm:max-w-[425px]"
    tabindex="-1" style="pointer-events: auto;">
        <div class="flex flex-col space-y-1.5 text-center sm:text-left">
            <h2 id="radix-:rl:" class="text-lg font-semibold leading-none tracking-tight">
                Login
            </h2>
            <p id="radix-:rm:" class="text-sm text-muted-foreground">
                <p style="color: red;">@ErrorMessage</p>
            </p>
        </div>
        <div class="grid gap-4 py-4">
            <div class="grid grid-cols-4 items-center gap-4">
                <label class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-right" for="name">
                    UserName
                </label>
                <input class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm col-span-3"
                id="username" @bind="Username">
            </div>
            <div class="grid grid-cols-4 items-center gap-4">
                <label class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-right" for="username">
                    PassWord
                </label>
                <input class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm col-span-3"
                type="password" @bind="Password">
            </div>
        </div>
        <div class="flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2">
            <button @onclick="Login" class="btn-white inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg]:size-4 [&amp;_svg]:shrink-0 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2"
            type="submit">
                Submit
            </button>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Route { get; set; }

    private string Username { get; set; }
    private string Password { get; set; }

    private string ErrorMessage { get; set; }

    private bool IsAuthenticated { get; set; }


    private void Login()
    {
        if (Username.Length >= 6){
            var userInfo = DatabaseModels.GetUserInfo(Username);
            if (userInfo.code == 200 && userInfo.data != null)
            {
                var data = (User)userInfo.data;
                if (data.UserName == Username && data.PassWord == DatabaseModels.SHA1Hash(Password))
                {
                    IsAuthenticated = true;
                    ErrorMessage = string.Empty;

                    JSRuntime.InvokeVoidAsync("ssc", "session", AuthModels.Generate(Username), "7");
                    JSRuntime.InvokeVoidAsync("ssc", "unm", Username, "7");

                    LoggerModels.AddToLog($"用户 {Username} 登录 , IP:[{HttpContextAccessor.HttpContext?.Connection?.RemoteIpAddress?.ToString()}]",
                    InfoLevel.Warning);

                    StateHasChanged();
                    NavigationManager.NavigateTo("/");
                    JSRuntime.InvokeVoidAsync("location.reload");
                }
                else
                {
                    ErrorMessage = "用户名或密码错误，请重试！";
                }
            }
            else
            {
                ErrorMessage = "用户不存在.";
            }
        }
    }
}